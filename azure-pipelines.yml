pool:
  vmImage: 'vs2017-win2016'

variables:
  Prerelease: 'ci'
  buildId: "$(Build.BuildId)"
  buildProjects: |
    **/src/System.Linq.Dynamic.Core/System.Linq.Dynamic.Core.AppVeyor.csproj

#    **/src/EntityFramework.DynamicLinq/EntityFramework.DynamicLinq.csproj
#    **/src/Microsoft.EntityFrameworkCore.DynamicLinq/Microsoft.EntityFrameworkCore.DynamicLinq.csproj

steps:
# Print buildId
- script: |
    echo "BuildId = $(buildId)"
  displayName: 'Print buildId'

# Install SonarScanner
- script: |
    dotnet tool install --global dotnet-sonarscanner
  displayName: Install SonarScanner

# Begin SonarScanner
# See also
# - https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools, else you get this error: `Since you just installed the .NET Core SDK, you will need to reopen the Command Prompt window before running the tool you installed.`
# - https://github.com/dotnet/cli/issues/8368
# - https://github.com/Microsoft/vsts-tasks/issues/8291
#
# - script: |
#     %USERPROFILE%\.dotnet\tools\dotnet-sonarscanner begin /k:"system.linq.dynamic.core" /d:sonar.organization="stefh-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(SONAR_TOKEN)" /v:"$(buildId)" /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"
#   displayName: Begin SonarScanner

#- task: MSBuild@1
  #displayName: Build Projects in Debug configuration
  #inputs:
   # solution: $(buildProjects)
    #msbuildLocationMethod: 'version' # Optional. Options: version, location
    #msbuildVersion: 'latest' # Optional. Options: latest, 15.0, 14.0, 12.0, 4.0
    #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
    #msbuildLocation: # Optional
    #platform: # Optional
    #configuration: Debug
    #msbuildArguments: # Optional
    #clean: true
    #maximumCpuCount: false # Optional
    #restoreNugetPackages: true
    #logProjectEvents: false # Optional
    #createLogFile: false # Optional

- task: DotNetCoreCLI@2
  displayName: Build Projects in Debug configuration
  inputs:
    command: 'build'
    arguments: /p:Configuration=Debug # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

# Build source, tests and run tests for net452 and netcoreapp2.1 (with coverage)
# - script: |
#     dotnet test ./test/WireMock.Net.Tests/WireMock.Net.Tests.csproj --configuration Debug --framework net452
#     dotnet test ./test/WireMock.Net.Tests/WireMock.Net.Tests.csproj --configuration Debug --framework netcoreapp2.1 --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
#   displayName: 'Build source, tests and run tests for net452 and netcoreapp2.1 (with coverage)'

# End SonarScanner
# - script: |
#     %USERPROFILE%\.dotnet\tools\dotnet-sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
#   displayName: End SonarScanner

# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

# Based on https://whereslou.com/2018/09/versioning-and-publishing-nuget-packages-automatically-using-azure-devops-pipelines/
- task: DotNetCoreCLI@2
  displayName: Build Projects in Release configuration
  inputs:
    command: 'build'
    arguments: /p:Configuration=Release # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

- task: DotNetCoreCLI@2
  displayName: Pack
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: pack
    configuration: 'Release'
    packagesToPack: $(buildProjects)
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    verbosityPack: 'normal'

# - task: PublishBuildArtifacts@1
#   displayName: Publish Artifacts
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'

# - task: DotNetCoreCLI@2
#   displayName: Push to MyGet
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
#   inputs:
#     command: custom
#     custom: nuget
#     arguments: push $(Build.ArtifactStagingDirectory)\packages\*.nupkg --source https://www.myget.org/F/wiremock-net/api/v3/index.json --no-service-endpoint --api-key $(MyGetKey)
